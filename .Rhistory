source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
#MyHoltWinters(ts(ferrocarril))
MyHoltWinters(st_simulated)
sequence_math
plot(st_simulated)
rm(list = ls())
set.seed(99183992)
# First we simulate a time serie that will be used for proves
sequence_math <- 10 * (cos(seq(0,12 * pi, pi/6))) + sqrt(seq(0,12 * pi, pi/6))
sequence_sim <- sequence_math + rnorm(length(sequence_math), 0, 2)
st_simulated <- ts(sequence_sim, frequency = 12, start = c(2000, 1))
#plot(st_simulated)
plot(st_simulated)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
plot(st_simulated)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
plot(st_simulated)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
plot(st_simulated)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
#plot(st_simulated)
plot(st_simulated)
# First we simulate a time serie that will be used for proves
sequence_math <- 10 * (cos(seq(0,12 * pi, pi/6))) + seq(0,12 * pi, pi/6) + 20 * sin(seq(0, pi, pi / 12 / 6))
sequence_sim <- sequence_math + rnorm(length(sequence_math), 0, 2)
st_simulated <- ts(sequence_sim, frequency = 12, start = c(2000, 1))
plot(st_simulated)
acf(st_simulated)
pacf(st_simulated)
acf(st_simulated)
# First we simulate a time serie that will be used for proves
sequence_math <- 10 * (cos(seq(0,12 * pi, pi/6))) + seq(0,12 * pi, pi/6) + 10 * sin(seq(0, pi, pi / 12 / 6))
sequence_sim <- sequence_math + rnorm(length(sequence_math), 0, 2)
st_simulated <- ts(sequence_sim, frequency = 12, start = c(2000, 1))
plot(st_simulated)
mod<-HoltWinters(st_simulated)
mod$alpha
mod$beta
mod$gamma
sequence_math <- 10 * (cos(seq(0,12 * pi, pi/6))) + seq(0,12 * pi, pi/6)
sequence_sim <- sequence_math + rnorm(length(sequence_math), 0, 2)
st_simulated <- ts(sequence_sim, frequency = 12, start = c(2000, 1))
lot(st_simulated)
plot(st_simulated)
mod<-HoltWinters(st_simulated)
mod$alpha
mod$beta
mod$gamma
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
sequence_math <- 10 * (cos(seq(0,12 * pi, pi/6))) + seq(0,12 * pi, pi/6) + 10 * sin(seq(0, pi, pi / 12 / 6))
sequence_sim <- sequence_math + rnorm(length(sequence_math), 0, 2)
st_simulated <- ts(sequence_sim, frequency = 12, start = c(2000, 1))
plot(st_simulated)
mod<-HoltWinters(st_simulated)
mod$coefficients
mod$alpha
mod$beta
mod$gamma
#MyHoltWinters(ts(ferrocarril))
MyHoltWinters(st_simulated)
sequence_math <- 10 * (cos(seq(0,12 * pi, pi/6))) + seq(0,12 * pi, pi/6) + 10 * sin(seq(0, pi, pi / 12 / 6))
sequence_sim <- sequence_math + rnorm(length(sequence_math), 0, 2)
st_simulated <- ts(sequence_sim, frequency = 12, start = c(2000, 1))
plot(st_simulated)
mod<-HoltWinters(st_simulated)
mod$coefficients
mod$alpha
mod$beta
mod$gamma
#MyHoltWinters(ts(ferrocarril))
MyHoltWinters(st_simulated)
# First we simulate a time serie that will be used for proves
sequence_math <- 10 * (cos(seq(0,12 * pi, pi/6))) + seq(0,12 * pi, pi/6) + 10 * sin(seq(0, pi, pi / 12 / 6))
sequence_sim <- sequence_math + rnorm(length(sequence_math), 0, 2)
st_simulated <- ts(sequence_sim, frequency = 12, start = c(2000, 1))
plot(st_simulated)
mod<-HoltWinters(st_simulated)
mod$coefficients
mod$alpha
mod$beta
mod$gamma
p <- frequency(x)
x<- st_simulated
p <- frequency(x)
p
value_vector <- c()
best_value <- Inf
par_matrix <- matrix(ncol = 3)
best_par <- NULL
for (a in seq(0.1, 0.9, by = 0.1)){
for (b in seq(0.1, 0.9, by = 0.1)){
for (c in seq(0.1, 0.9, by = 0.1)){
optimo <- optim(c(a,b,c), fun.optim, data = c(x, p), method = "L-BFGS-B",
lower = c(0.001, 0.001, 0.001), upper = c(0.999, 0.999, 0.999))
par_matrix <- rbind(par_matrix, optimo$par)
value_vector <- c(value_vector, optimo$value)
if (optimo$value < best_value){
best_value <- optimo$value
best_par <- optimo$par
print("Iter")
print(best_value)
print(best_par)
}
}
}
}
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
MyHoltWinters <- function(x, alpha = TRUE, beta = TRUE, gamma = TRUE){
if (!is.ts(x)){
print("The input vector must be a time serie")
return()
}
}
fun.ajuste <- function(serie, freq, alfa, beta, gamma){
n <- length(serie)
valfitted <- c()
L0 <- sum(serie[1:freq + freq]) / freq
T0 <- (sum(serie[1:freq + freq]) - sum(serie[1:freq])) / (freq ^ 2)
S0 <- (serie[1:freq + freq] - L0)
for (i in (2 * freq + 1):n){
S0ind <- i %% freq
if (S0ind == 0){S0ind <- freq}
pred <- L0 + T0 + S0[S0ind]
valfitted <- c(valfitted, pred)
L1 <- alpha * (serie[i] - S0[S0ind]) + (1 - alpha) * (L0 + T0)
T1 <- beta * (L1 - L0) + (1 - beta) * T0
S1 <- gamma * (serie[i] - L1) + (1 - gamma) * S0[S0ind]
L0 <- L1
T0 <- T1
S0[S0ind] <- S1
}
SE <- sum((serie[(2 * freq + 1):n] - valfitted) ^ 2)
ajust <- list(valfitted = valfitted, SE = SE)
return(ajust)
}
fun.optim <- function(vect, data){
#print(vect)
n <- length(data)
aj <- fun.ajuste(data[1:(n - 1)], data[n], vect[1], vect[2], vect[3])
#print(aj$SE)
return(aj$SE)
}
sequence_math <- 10 * (cos(seq(0,12 * pi, pi/6))) + seq(0,12 * pi, pi/6) + 10 * sin(seq(0, pi, pi / 12 / 6))
sequence_sim <- sequence_math + rnorm(length(sequence_math), 0, 2)
st_simulated <- ts(sequence_sim, frequency = 12, start = c(2000, 1))
plot(st_simulated)
#MyHoltWinters(ts(ferrocarril))
mod<-HoltWinters(st_simulated)
mod$coefficients
mod$alpha
mod$beta
mod$gamma
x<- st_simulated
p <- frequency(x)
value_vector <- c()
best_value <- Inf
par_matrix <- matrix(ncol = 3)
best_par <- NULL
for (a in seq(0.1, 0.9, by = 0.1)){
for (b in seq(0.1, 0.9, by = 0.1)){
for (c in seq(0.1, 0.9, by = 0.1)){
optimo <- optim(c(a,b,c), fun.optim, data = c(x, p), method = "L-BFGS-B",
lower = c(0.001, 0.001, 0.001), upper = c(0.999, 0.999, 0.999))
par_matrix <- rbind(par_matrix, optimo$par)
value_vector <- c(value_vector, optimo$value)
if (optimo$value < best_value){
best_value <- optimo$value
best_par <- optimo$par
print("Iter")
print(best_value)
print(best_par)
}
}
}
}
fun.ajuste <- function(serie, freq, alpha, beta, gamma){
n <- length(serie)
valfitted <- c()
L0 <- sum(serie[1:freq + freq]) / freq
T0 <- (sum(serie[1:freq + freq]) - sum(serie[1:freq])) / (freq ^ 2)
S0 <- (serie[1:freq + freq] - L0)
for (i in (2 * freq + 1):n){
S0ind <- i %% freq
if (S0ind == 0){S0ind <- freq}
pred <- L0 + T0 + S0[S0ind]
valfitted <- c(valfitted, pred)
L1 <- alpha * (serie[i] - S0[S0ind]) + (1 - alpha) * (L0 + T0)
T1 <- beta * (L1 - L0) + (1 - beta) * T0
S1 <- gamma * (serie[i] - L1) + (1 - gamma) * S0[S0ind]
L0 <- L1
T0 <- T1
S0[S0ind] <- S1
}
SE <- sum((serie[(2 * freq + 1):n] - valfitted) ^ 2)
ajust <- list(valfitted = valfitted, SE = SE)
return(ajust)
}
fun.optim <- function(vect, data){
#print(vect)
n <- length(data)
aj <- fun.ajuste(data[1:(n - 1)], data[n], vect[1], vect[2], vect[3])
#print(aj$SE)
return(aj$SE)
}
# First we simulate a time serie that will be used for proves
sequence_math <- 10 * (cos(seq(0,12 * pi, pi/6))) + seq(0,12 * pi, pi/6) + 10 * sin(seq(0, pi, pi / 12 / 6))
sequence_sim <- sequence_math + rnorm(length(sequence_math), 0, 2)
st_simulated <- ts(sequence_sim, frequency = 12, start = c(2000, 1))
plot(st_simulated)
#MyHoltWinters(ts(ferrocarril))
mod<-HoltWinters(st_simulated)
mod$coefficients
mod$alpha
mod$beta
mod$gamma
x<- st_simulated
p <- frequency(x)
value_vector <- c()
best_value <- Inf
par_matrix <- matrix(ncol = 3)
best_par <- NULL
for (a in seq(0.1, 0.9, by = 0.1)){
for (b in seq(0.1, 0.9, by = 0.1)){
for (c in seq(0.1, 0.9, by = 0.1)){
optimo <- optim(c(a,b,c), fun.optim, data = c(x, p), method = "L-BFGS-B",
lower = c(0.001, 0.001, 0.001), upper = c(0.999, 0.999, 0.999))
par_matrix <- rbind(par_matrix, optimo$par)
value_vector <- c(value_vector, optimo$value)
if (optimo$value < best_value){
best_value <- optimo$value
best_par <- optimo$par
print("Iter")
print(best_value)
print(best_par)
}
}
}
}
ajuste_f <- fun.ajuste(x, p, best_par[1], best_par[2], best_par[3])
HoltWinters
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
seq(0.1, 0.9, by = 0.1)
mod<-HoltWinters(st_simulated)
mod$coefficients
mod$alpha
mod$beta
mod$gamma
MyHoltWinters(st_simulated)
rm(list = ls())
set.seed(99183992)
#Also the data from the exam of last year
ferrocarril <- c(
139733896, 144482139, 123561582, 145152679,
144482993, 146521012, 125713176, 149226028,
145885551, 142603051, 121745633, 145120639,
143638419, 144004197, 122310123, 148672623,
141285387, 144252125, 124124600, 149670808,
140193460, 144167136, 128486754, 149125431,
140008498, 149341300, 130352920, 150039240,
148622967, 151486750, 134747548, 158497166,
150246047, 163228902, 140311097, 165269379,
161457841, 160348073, 139321325, 165980376
)
MyHoltWinters <- function(x, alpha = TRUE, beta = TRUE, gamma = TRUE){
if (!is.ts(x)){
print("The input vector must be a time serie")
return()
}
optimizer(x)
}
fun.ajuste <- function(serie, freq, alpha, beta, gamma){
n <- length(serie)
valfitted <- c()
L0 <- sum(serie[1:freq + freq]) / freq
T0 <- (sum(serie[1:freq + freq]) - sum(serie[1:freq])) / (freq ^ 2)
S0 <- (serie[1:freq + freq] - L0)
for (i in (2 * freq + 1):n){
S0ind <- i %% freq
if (S0ind == 0){S0ind <- freq}
pred <- L0 + T0 + S0[S0ind]
valfitted <- c(valfitted, pred)
L1 <- alpha * (serie[i] - S0[S0ind]) + (1 - alpha) * (L0 + T0)
T1 <- beta * (L1 - L0) + (1 - beta) * T0
S1 <- gamma * (serie[i] - L1) + (1 - gamma) * S0[S0ind]
L0 <- L1
T0 <- T1
S0[S0ind] <- S1
}
SE <- sum((serie[(2 * freq + 1):n] - valfitted) ^ 2)
ajust <- list(valfitted = valfitted, SE = SE)
return(ajust)
}
fun.optim <- function(vect, data){
#print(vect)
n <- length(data)
aj <- fun.ajuste(data[1:(n - 1)], data[n], vect[1], vect[2], vect[3])
return(aj$SE)
}
optimizer2 <- function(x){
p <- frequency(x)
value_vector <- c()
best_value <- Inf
par_matrix <- matrix(ncol = 3)
best_par <- NULL
for (a in seq(0.1, 0.9, by = 0.1)){
for (b in seq(0.1, 0.9, by = 0.1)){
for (c in seq(0.1, 0.9, by = 0.1)){
optimo <- optim(c(a,b,c), fun.optim, data = c(x, p), method = "L-BFGS-B",
lower = c(0.001, 0.001, 0.001), upper = c(0.999, 0.999, 0.999))
par_matrix <- rbind(par_matrix, optimo$par)
value_vector <- c(value_vector, optimo$value)
if (optimo$value < best_value){
best_value <- optimo$value
best_par <- optimo$par
print("Iter")
print(best_value)
print(best_par)
}
}
}
}
}
optimizer <- function(x){
p <- frequency(x)
value_vector <- c()
best_value <- Inf
par_matrix <- matrix(ncol = 3)
best_par <- NULL
optimo <- optim(c(a,b,c), fun.optim, data = c(x, p), method = "L-BFGS-B",
lower = c(0.001, 0.001, 0.001), upper = c(0.999, 0.999, 0.999))
par_matrix <- rbind(par_matrix, optimo$par)
value_vector <- c(value_vector, optimo$value)
}
# First we simulate a time serie that will be used for proves
sequence_math <- 10 * (cos(seq(0,12 * pi, pi/6))) + seq(0,12 * pi, pi/6) + 10 * sin(seq(0, pi, pi / 12 / 6))
sequence_sim <- sequence_math + rnorm(length(sequence_math), 0, 2)
st_simulated <- ts(sequence_sim, frequency = 12, start = c(2000, 1))
plot(st_simulated)
#MyHoltWinters(ts(ferrocarril))
mod<-HoltWinters(st_simulated)
mod$coefficients
mod$alpha
mod$beta
mod$gamma
# predict(mod, 5)
# plot(mod)
# freq = 12
# Bucle
# Comparar con Holtwinters
# Representar
MyHoltWinters(st_simulated)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
HoltWinters
a <- list()
a$as<-7
a$as
rm(a)
View(mod)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
MyHoltWinters(st_simulated)
MyHoltWinters <- function(x, alpha = TRUE, beta = TRUE, gamma = TRUE){
if (!is.ts(x)){
print("The input vector must be a time serie")
return()
}
solution <- list()
p <- frequency(x)
optimo <- optim(rep(0.5,3), fun.optim, data = c(x, p), method = "L-BFGS-B",
lower = c(0.001, 0.001, 0.001), upper = c(0.999, 0.999, 0.999))
ajuste <- fun.ajuste(x, p, optimo$par[1], optimo$par[2], optimo$par[3])
plot(x)
plot(c(rep(NA, 2 * p), ajuste$valfitted))
}
MyHoltWinters(st_simulated)
c(rep(NA, 2 * p), ajuste$valfitted)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
plot(a, a^2)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
args(plot)
?plot
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
plot(ts(1:45), start = 2, end = 7, frequency = 9)
source("~/.active-rstudio-document", echo=TRUE)
plot(ts(1:5), start = 2, end = 7, frequency = 9)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
plot(ts(1:50), start = c(3, 1990), frequency = 4)
plot(ts(1:50), start = c(1990, 3), frequency = 4)
plot(ts(1:50), start = c(1990, 1), frequency = 4)
plot(ts(1:50, start = c(1990, 1), frequency = 4))
plot(ts(1:50, start = c(1990, 1), frequency = 4))
plot(ts(seq(-5, 50, length.out = 50), start = c(1990, 1), frequency = 4))
source("~/.active-rstudio-document", echo=TRUE)
lines(ts(seq(-5, 50, length.out = 48), start = c(1990, 3), frequency = 4))
source("~/.active-rstudio-document", echo=TRUE)
plot(ts(1:50, start = c(1990, 1), frequency = 4))
lines(seq(-5, 50, length.out = 48), start = c(1990, 3), frequency = 4)
lines(seq(-5, 50, length.out = 50))
source("~/.active-rstudio-document", echo=TRUE)
plot(ts(1:50, start = c(1990, 1), frequency = 4))
lines(seq(-5, 50, length.out = 50))
start(st_simulated)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
HoltWinters
View(mod)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
View(mod)
View(mod)
paste('Seasonal', 1:12)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
View(Mymodelo)
View(mod)
View(Mymodelo)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
View(Mymodelo)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
View(Mymodelo)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/MyHoltWinters.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/Proves.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/Proves.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/Proves.R", echo=TRUE)
mape_Mymodelo <- 100*mean(abs(st_simulated-Mymodelo$fitted[,1])/st_simulated)
mape_Mymodelo
Mymodelo$fitted[,1]
Mymodelo$fitted
st_simulated-Mymodelo$fitted[,1]
mape_Mymodelo <- 100*mean(abs(st_simulated-Mymodelo$fitted[,1])/st_simulated)
mape_Mymodelo
mape_Mymodelo <- 100*mean(abs(st_simulated-Mymodelo$fitted[,1])/st_simulated)
mape_Mymodelo
mape_Mymodelo <- 100*mean(abs(st_simulated-mod$fitted[,1])/st_simulated)
mape_Mymodelo
mape_Mymodelo <- 100*mean(abs(st_simulated-Mymodelo$fitted[,1])/st_simulated)
mape_mod <- 100*mean(abs(st_simulated-mod$fitted[,1])/st_simulated)
mape_Mymodelo
mape_mod
rmse_Mymodelo <- sqrt(mean((st_simulated-Mymodelo$fitted[,1])^2))
rmse_mod <- sqrt(mean((st_simulated-mod$fitted[,1])^2))
rmse_Mymodelo
rmse_mod
mape_Mymodelo <- 100*mean(abs(st_simulated-Mymodelo$fitted[,1])/st_simulated)
mape_mod <- 100*mean(abs(st_simulated-mod$fitted[,1])/st_simulated)
mape_Mymodelo
mape_mod
rmse_Mymodelo <- sqrt(mean((st_simulated-Mymodelo$fitted[,1])^2))
rmse_mod <- sqrt(mean((st_simulated-mod$fitted[,1])^2))
rmse_Mymodelo
rmse_mod
(length(st_simulated) - frequency(st_simulated)):length(st_simulated)
st_simulated_reduced <- st_simulated[-(length(st_simulated) - frequency(st_simulated)):length(st_simulated)]
[-(length(st_simulated) - frequency(st_simulated)):length(st_simulated)]
-(length(st_simulated) - frequency(st_simulated)):length(st_simulated)
st_simulated
length(st_simulated)
frequency(st_simulated)
length(st_simulated)
(length(st_simulated) - frequency(st_simulated)):length(st_simulated)
st_simulated_reduced <-
st_simulated[-(length(st_simulated) - frequency(st_simulated)):length(st_simulated)]
a = c(1,2,3,4)
a[3]
a[-3]
-(length(st_simulated) - frequency(st_simulated)):length(st_simulated)
(length(st_simulated) - frequency(st_simulated)):length(st_simulated)
st_simulated_reduced <-
st_simulated[-((length(st_simulated) - frequency(st_simulated)):length(st_simulated))]
st_simulated_reduced
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/Proves.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/Proves.R", echo=TRUE)
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/Proves.R", echo=TRUE)
mod_reduced
st_simulated_reduced
source("C:/Users/jpeir/Desktop/UNI/SERIES TEMPORALES/MyHoltWinters/Proves.R", echo=TRUE)
